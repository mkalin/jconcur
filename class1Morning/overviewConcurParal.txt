 
 Overview of the key terms: concurrency and parallelism

 -- Concurrency and (true) Parallelism

 # Concurrency requires "handling many tasks during the same time span":

   ## Any app with a GUI (e.g., a game) needs to manage the GUI and perform the underlying logic.

   ## A typical network app queues up requests, which then need to be handled concurrently: such an
      app is a 'concurrent app' (e.g., a 'concurrent web server').

 # True parallelism requires "processing many tasks literally at the same time."

   ## The tasks in a concurrent app would be farmed out to separate processors for true parallelism.

   ## True parallelism requires multiple processors (CPUs).

      ### Multiprocessor machines now are the rule, not the exception.

      ### A 'multicore' machine is a multiprocessor machine, with one or more processors (CPUs) per core.

   ## For a more detailed explanation of concurrency and parallelism, see the
      working file: concurParalContrast.txt

 # In modern languages such as Java, a concurrent app automatically becomes a parallel app if
   run on a multiprocessor machine: no programmer intervention is required.
=============================================================================

 -- Multiprocessing and multithreading

 # The two classic (and still dominant) mechanisms for concurrency: multiprocessing and multithreading.

   ## Each mechanism can support true parallelism on a multiprocessor machine.

   ## Non-blocking I/O often is used in combination with multithreading and multiprocessing.

   ## Multithreading and multiprocessing can be used in combination.

   ## Hybrid approaches using some mix of multiprocessing, multithreading, and non-blocking I/O are common.

 # A process is a program in execution, which requires (1) a processor to execute the instructions and
   (2) memory to hold the program's instructions and data. Processes that are executing 'apps' rather than
   utilities or background workers ('daemons') typically use (3) I/O devices as well.

   ## Each process has its own address space: memory locations that the process can access legitimately.

      ### Processes can share memory, but this requires some setup: the exception, not the rule.

   ## On modern systems, a process has at least one 'thread of execution', which is a sequence of
      executable instructions: a 1-instruction thread is quite small, but still a thread.

   ## A process with just one thread is 'single-threaded'; otherwise, 'multithreaded'.

   ## Threads within the same process share the same address space: much more on this with code examples.
==============================================================================

 -- Java and Multithreading

 # The natural way to write concurrent/parallel Java apps is with multithreading.

   ## Multiprocessing is possible, but not the best way to go.
      For a code example, see the file multiP.MultiprocessingEx.java.

 # An instance of java.lang.Thread maps to a 'native thread', which is a executable thread
   at the operating-system (OS) level. 

   ## A 'green thread' (pre-Java 1.4) is under JVM rather than OS control.

 # Once started, a Java thread executes until it stops: the best way to stop (terminate)
   a Java thread is to have the thread exit the run() method, which is the method that
   such a thread executes sometime after start() is invoked in Java code.

   ## Basic two-step for a Java Thread:

      // In practice, we'd have a subclass of Thread (e.g., MyThread) with our
      // own overload of run(). But the basic two-step remains:
      Thread t = new Thread() { ... };  // construct a Thread and override its run() method
      t.start();                        // invoke start() -- not run() -- on the Thread.
      
   ## Once a Java thread terminates, it cannot be restarted.
-----

 # Java's runtime, the JVM, is a multithreaded process. Accordingly, any Java app
   is technically multithreaded.

   ## Things get interesting when the programmer creates, starts, and manages additional threads.

 # When a standard Java application is run, for example

    % java MultithreadEx

   the app starts out with the 'main-thread' executing the 'main' method. There
   are other JVM-worker threads under the hood (we'll see an example shortly).

   Example: See the separate file MultithreadEx.java.

   ## In the MultithreadEx example, the 'main-thread' is a User rather than a Daemon (worker) thread,
      and one of the threads that manages the shown Frame is likewise a User thread.

      ### A Java Application runs so long as at least one User thread is alive, though perhaps
          just sleeping. 

      ### In equivalent terms, a Daemon thread alone cannot sustain a Java Application.

      ### Daemon threads are 'background workers', unable on their own to sustain an application.

          #### The JVM uses Daemon threads for various essential jobs (e.g., garbage collection).

      ### Daemon threads can be tricky. Suppose, for example, that a Daemon thread is in the middle of
          an I/O operation when the app's last User thread terminates: the Daemon thread terminates,
          perhaps leaving the I/O operation in an indeterminate state.
 
      ### For another code example, see the UserDaemon.java file. The documentation explains how to
          test the difference between User and Daemon threads.




 

                
