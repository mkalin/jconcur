
 Quick overview of the ForkJoin framework with respect to 'recursive tasks'

 # A 'recursive task' decomposes into subtasks with the same structure as the original task.

   ## So the logic that applies to a 'recursive task' applies likewise to the decomposed subtasks.

 # The ForkJoin framework is well suited for the 'scatter/gather' approach to handling 
   recursive tasks: scatter ('fork') the subtasks among different threads, 
   then gather ('join') the results together. 

   ## This framework provides an under-the-hood thread pool whose threads can be delegated, at a 
      high level, to handle the original task and its subtasks.

 # A standard, by-now familiar example is tree processing. Consider the 
   following tree, rooted at node A:

               A              # root of tree (e.g., a hierarchical file system)
               |
         +-----+-----+  
         |     |     |      
         B     C     D        # non-empty subtrees rooted at B, C, and D
        / \    |     |
       e   f   g  +--+--+     # e, f, and g are 'leaf nodes' (roots with empty subtrees)
                  |  |  |     
                  h  i  j     # h, i, and j are also 'leaf nodes'

   ## The task of traversing A can be divided into subtasks: traversing trees
      B, C, and D -- and so on.

      ### To traverse a tree is to 'visit' each node to do whatever processing
          happens to be appropriate, e.g., searching the nodes for a particular property.

          #### The tree might be a file system, and the traversal a search for files
               with a '.java' extension.

 # The ForkJoin framework provides a high-level API for bringing parallelism to recursive tasks.

 # It's the programmer as problem-solver who must determine whether the task at hand is, indeed, recursive. 

   ## The programmer decides on the algorithm for processing the recursive structure.

   ## The ForkJoin framework then makes it straightforward to execute with multithreaded concurrency.
